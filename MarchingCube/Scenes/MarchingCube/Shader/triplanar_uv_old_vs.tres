[gd_resource type="VisualShader" load_steps=13 format=3 uid="uid://c5m33764upseh"]

[sub_resource type="VisualShaderNodeTransformVecMult" id="VisualShaderNodeTransformVecMult_f8jhq"]
operator = 2

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_i5vy1"]
input_name = "inv_view_matrix"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_vkjbm"]
input_name = "normal"

[sub_resource type="VisualShaderNodeTransformVecMult" id="VisualShaderNodeTransformVecMult_ka20c"]

[sub_resource type="VisualShaderNodeVectorFunc" id="VisualShaderNodeVectorFunc_i0rlo"]

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_hyd4n"]
constant = 1.0

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_583e2"]
input_name = "vertex"

[sub_resource type="VisualShaderNodeVectorFunc" id="VisualShaderNodeVectorFunc_uuiks"]
function = 4

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_1ecvj"]
size = Vector2(1040, 840)
expression = "// X Plane if normal is more biased toward X. (Insert XPlane joke here)
if (abs_normal.x >= abs_normal.z && abs_normal.x >= abs_normal.y) {
	out_normal = texture(tex, pos.zy / tex_scale).rgb;
}

// Y Plane
else if (abs_normal.y >= abs_normal.x && abs_normal.y >= abs_normal.z) {
	out_normal = texture(tex, pos.xz / tex_scale).rgb;
}

// Z Plane
else if (abs_normal.z >= abs_normal.x && abs_normal.z >= abs_normal.y) {
	out_normal = texture(tex, pos.xy / tex_scale).rgb;
}"

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_xjr2m"]
parameter_name = "Texture"
texture_type = 2

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_xehvc"]
parameter_name = "TextureScale"
default_value_enabled = true
default_value = 1.0

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_ycjs1"]
parameter_name = "BaseColor"
default_value_enabled = true
default_value = Color(0.55, 0.32175, 0.0935, 1)

[resource]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_toon;

uniform vec4 BaseColor : source_color = vec4(0.550000, 0.321750, 0.093500, 1.000000);
uniform sampler2D Texture : hint_normal;
uniform float TextureScale = 1;



void fragment() {
// ColorParameter:9
	vec4 n_out9p0 = BaseColor;


// FloatConstant:25
	float n_out25p0 = 1.000000;


// Input:11
	mat4 n_out11p0 = INV_VIEW_MATRIX;


// Input:2
	vec3 n_out2p0 = NORMAL;


// TransformVectorMult:10
	vec3 n_out10p0 = (n_out11p0 * vec4(n_out2p0, 0.0)).xyz;


// VectorFunc:5
	vec3 n_out5p0 = abs(n_out10p0);


// Input:3
	vec3 n_out3p0 = VERTEX;


// TransformVectorMult:23
	vec3 n_out23p0 = (n_out11p0 * vec4(n_out3p0, 1.0)).xyz;


// FloatParameter:8
	float n_out8p0 = TextureScale;


	vec3 n_out6p0;
// Expression:6
	n_out6p0 = vec3(0.0, 0.0, 0.0);
	{
		// X Plane if normal is more biased toward X. (Insert XPlane joke here)
		if (n_out5p0.x >= n_out5p0.z && n_out5p0.x >= n_out5p0.y) {
			n_out6p0 = texture(Texture, n_out23p0.zy / n_out8p0).rgb;
		}
		
		// Y Plane
		else if (n_out5p0.y >= n_out5p0.x && n_out5p0.y >= n_out5p0.z) {
			n_out6p0 = texture(Texture, n_out23p0.xz / n_out8p0).rgb;
		}
		
		// Z Plane
		else if (n_out5p0.z >= n_out5p0.x && n_out5p0.z >= n_out5p0.y) {
			n_out6p0 = texture(Texture, n_out23p0.xy / n_out8p0).rgb;
		}
	}


// VectorFunc:24
	vec3 n_out24p0 = normalize(n_out6p0);


// Output:0
	ALBEDO = vec3(n_out9p0.xyz);
	ROUGHNESS = n_out25p0;
	NORMAL_MAP = n_out24p0;


}
"
graph_offset = Vector2(-677.096, -226.845)
modes/depth_draw = 1
modes/diffuse = 2
modes/specular = 1
nodes/fragment/0/position = Vector2(1740, -20)
nodes/fragment/2/node = SubResource("VisualShaderNodeInput_vkjbm")
nodes/fragment/2/position = Vector2(-1100, 80)
nodes/fragment/3/node = SubResource("VisualShaderNodeInput_583e2")
nodes/fragment/3/position = Vector2(-1100, 260)
nodes/fragment/5/node = SubResource("VisualShaderNodeVectorFunc_uuiks")
nodes/fragment/5/position = Vector2(-160, -20)
nodes/fragment/6/node = SubResource("VisualShaderNodeExpression_1ecvj")
nodes/fragment/6/position = Vector2(220, 200)
nodes/fragment/6/size = Vector2(1040, 840)
nodes/fragment/6/input_ports = "0,4,abs_normal;1,4,pos;2,8,tex;3,0,tex_scale;"
nodes/fragment/6/output_ports = "0,4,out_normal;"
nodes/fragment/6/expression = "// X Plane if normal is more biased toward X. (Insert XPlane joke here)
if (abs_normal.x >= abs_normal.z && abs_normal.x >= abs_normal.y) {
	out_normal = texture(tex, pos.zy / tex_scale).rgb;
}

// Y Plane
else if (abs_normal.y >= abs_normal.x && abs_normal.y >= abs_normal.z) {
	out_normal = texture(tex, pos.xz / tex_scale).rgb;
}

// Z Plane
else if (abs_normal.z >= abs_normal.x && abs_normal.z >= abs_normal.y) {
	out_normal = texture(tex, pos.xy / tex_scale).rgb;
}"
nodes/fragment/7/node = SubResource("VisualShaderNodeTexture2DParameter_xjr2m")
nodes/fragment/7/position = Vector2(-1120, 400)
nodes/fragment/8/node = SubResource("VisualShaderNodeFloatParameter_xehvc")
nodes/fragment/8/position = Vector2(-1060, 820)
nodes/fragment/9/node = SubResource("VisualShaderNodeColorParameter_ycjs1")
nodes/fragment/9/position = Vector2(1200, -380)
nodes/fragment/10/node = SubResource("VisualShaderNodeTransformVecMult_f8jhq")
nodes/fragment/10/position = Vector2(-500, -80)
nodes/fragment/11/node = SubResource("VisualShaderNodeInput_i5vy1")
nodes/fragment/11/position = Vector2(-1040, -60)
nodes/fragment/23/node = SubResource("VisualShaderNodeTransformVecMult_ka20c")
nodes/fragment/23/position = Vector2(-500, 140)
nodes/fragment/24/node = SubResource("VisualShaderNodeVectorFunc_i0rlo")
nodes/fragment/24/position = Vector2(1340, 160)
nodes/fragment/25/node = SubResource("VisualShaderNodeFloatConstant_hyd4n")
nodes/fragment/25/position = Vector2(1320, -60)
nodes/fragment/connections = PackedInt32Array(2, 0, 10, 1, 10, 0, 5, 0, 11, 0, 10, 0, 7, 0, 6, 2, 8, 0, 6, 3, 5, 0, 6, 0, 3, 0, 23, 1, 11, 0, 23, 0, 23, 0, 6, 1, 9, 0, 0, 0, 6, 0, 24, 0, 24, 0, 0, 9, 25, 0, 0, 3)
